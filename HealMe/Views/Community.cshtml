<!DOCTYPE html>
<html lang="vi">
<head>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-S5V5NMZYQ4"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());

        gtag('config', 'G-S5V5NMZYQ4');
    </script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Danh sách công việc</title>
    <link rel="stylesheet" href="~/css/HealMeVer2 - Comunity.css" />

</head>
<body>
    <header>
        <nav class="containerr">
            <div>
                <a style="text-decoration:none; color:none" href="/Home">
                    <div class="logo">
                        Daily Catalyst

                    </div>
                </a>


            </div>

            <ul class="nav-links">
                <li><a href="/Task">Nhiệm vụ của bạn</a></li>
                <li><a href="/Home/BuyNow">Mua ngay</a></li>
                <li><a href="/Home/Feedback">Cảm nhận của mọi người</a></li>
                <li><a href="/Home/Comunity">Cộng đồng</a></li>
                @{
                    var userId = Context.Session.GetString("UserId");
                    if (!string.IsNullOrEmpty(userId))
                    {
                        <li><a href="/Authentication/Logout">Đăng xuất</a></li>
                    }
                    else
                    {
                        <li><a href="/Authentication/Login">Đăng nhập</a></li>
                    }
                }
            </ul>
        </nav>
    </header>
    <div class="container">
       
        <div class="headerr">
            <h1>Mọi người đã làm được gì?</h1>
            <p>Cùng xem mọi người có đang chăm chỉ như bạn không?</p>
        </div>

        <div class="filter-tabs">
            <button class="filter-tab active" onclick="filterTasks('all')">Tất cả</button>
            <button class="filter-tab" onclick="filterTasks('pending')">Chưa hoàn thành</button>
            <button class="filter-tab" onclick="filterTasks('completed')">Đã hoàn thành</button>
        </div>

        <div class="task-grid" id="taskGrid">
            <!-- Dữ liệu mẫu -->
        </div>

        <div class="no-tasks" id="noTasks" style="display: none;">
            <p>Chưa có công việc nào được thêm</p>
        </div>

        <div id="loading">
            <p>⏳ Đang tải dữ liệu...</p>
        </div>
    </div>

    <script>
        const API_BASE_URL = 'http://dailycatalyst.sytes.net/api/TaskApi';
        let allTasks = [];
        let currentFilter = 'all';
        let currentPage = 1;
        let totalPages = 1;
        let isLoading = false;

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function createTaskCard(task) {
            const card = document.createElement('div');
            card.className = `task-card ${task.completed ? 'completed' : ''}`;
            card.setAttribute('data-status', task.completed ? 'completed' : 'pending');
            
            const imageHtml = task.imageUrl 
                ? `<img src="${task.imageUrl}" alt="Task image" class="task-image">`
                : `<div class="task-image placeholder">📷 Không có hình ảnh</div>`;
            
            const noteHtml = task.note 
                ? `<div class="task-note">${task.note}</div>`
                : `<div class="task-note empty">Không có ghi chú</div>`;
            
            const completedAtHtml = task.completedAt 
                ? `<div>Hoàn thành: ${formatDate(task.completedAt)}</div>`
                : '';

            card.innerHTML = `
                <div class="task-status ${task.completed ? 'status-completed' : 'status-pending'}">
                    ${task.completed ? 'Hoàn thành' : 'Chưa xong'}
                </div>
                
                ${imageHtml}
                
                <div class="task-title">${task.title}</div>
                
                ${noteHtml}
                
                <div class="task-meta">
                    <div class="task-dates">
                        <div>Tạo: ${formatDate(task.createdAt)}</div>
                        ${completedAtHtml}
                    </div>
                    <div class="task-actions">
                        
                    </div>
                </div>
            `;
            
            return card;
        }

        async function loadTasks(page = 1, reset = false) {
            if (isLoading) return;
            
            isLoading = true;
            const loadingElement = document.getElementById('loading');
            if (loadingElement) loadingElement.style.display = 'block';

            try {
                const params = new URLSearchParams({
                    page: page,
                    pageSize: 10
                });

                if (currentFilter === 'completed') {
                    params.append('completed', 'true');
                } else if (currentFilter === 'pending') {
                    params.append('completed', 'false');
                }

                const response = await fetch(`${API_BASE_URL}/GetAllTask?${params}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                
                if (reset) {
                    allTasks = data.tasks;
                } else {
                    allTasks = [...allTasks, ...data.tasks];
                }

                currentPage = data.currentPage;
                totalPages = data.totalPages;
                
                renderTasks();
                updateLoadMoreButton();
                
            } catch (error) {
                console.error('Error loading tasks:', error);
                showError('Không thể tải danh sách công việc. Vui lòng thử lại.');
            } finally {
                isLoading = false;
                if (loadingElement) loadingElement.style.display = 'none';
            }
        }

        function showError(message) {
            const taskGrid = document.getElementById('taskGrid');
            taskGrid.innerHTML = `
                <div style="grid-column: 1 / -1; text-align: center; color: white; padding: 20px;">
                    <p>❌ ${message}</p>
                </div>
            `;
        }

        function updateLoadMoreButton() {
            let loadMoreBtn = document.getElementById('loadMoreBtn');
            if (!loadMoreBtn) {
                loadMoreBtn = document.createElement('button');
                loadMoreBtn.id = 'loadMoreBtn';
                loadMoreBtn.className = 'load-more-btn';
                loadMoreBtn.onclick = loadMoreTasks;
                document.querySelector('.container').appendChild(loadMoreBtn);
            }

            if (currentPage < totalPages) {
                loadMoreBtn.style.display = 'block';
                loadMoreBtn.textContent = `Tải thêm (${currentPage}/${totalPages})`;
            } else {
                loadMoreBtn.style.display = 'none';
            }
        }

        function loadMoreTasks() {
            if (currentPage < totalPages) {
                loadTasks(currentPage + 1, false);
            }
        }

        function renderTasks() {
            const taskGrid = document.getElementById('taskGrid');
            const noTasks = document.getElementById('noTasks');
            
            taskGrid.innerHTML = '';
            
            if (allTasks.length === 0) {
                noTasks.style.display = 'block';
                return;
            } else {
                noTasks.style.display = 'none';
            }
            
            allTasks.forEach(task => {
                const taskCard = createTaskCard(task);
                taskGrid.appendChild(taskCard);
            });
        }

        function filterTasks(filter) {
            currentFilter = filter;
            allTasks = []; // Reset tasks
            currentPage = 1;
            
            // Cập nhật active tab
            document.querySelectorAll('.filter-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.target.classList.add('active');
            
            loadTasks(1, true);
        }

        async function toggleTask(taskId) {
            try {
                const response = await fetch(`${API_BASE_URL}/ToggleTask/${taskId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                // Update task in local array
                const task = allTasks.find(t => t.taskId === taskId);
                if (task) {
                    task.completed = result.completed;
                    task.completedAt = result.completedAt;
                    renderTasks();
                }
                
                // Show success message
                showSuccessMessage(result.message);
                
            } catch (error) {
                console.error('Error toggling task:', error);
                showError('Không thể cập nhật trạng thái công việc');
            }
        }

        async function deleteTask(taskId) {
            if (!confirm('Bạn có chắc chắn muốn xóa công việc này?')) {
                return;
            }

            try {
                const response = await fetch(`${API_BASE_URL}/DeleteTask/${taskId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                // Remove task from local array
                const index = allTasks.findIndex(t => t.taskId === taskId);
                if (index > -1) {
                    allTasks.splice(index, 1);
                    renderTasks();
                    updateLoadMoreButton();
                }
                
                showSuccessMessage(result.message);
                
            } catch (error) {
                console.error('Error deleting task:', error);
                showError('Không thể xóa công việc');
            }
        }

        function showSuccessMessage(message) {
            const successDiv = document.createElement('div');
            successDiv.className = 'success-message';
            successDiv.textContent = message;
            successDiv.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #4CAF50;
                color: white;
                padding: 15px 20px;
                border-radius: 5px;
                z-index: 1000;
                animation: slideIn 0.3s ease;
            `;
            
            document.body.appendChild(successDiv);
            
            setTimeout(() => {
                successDiv.remove();
            }, 3000);
        }

        // Khởi tạo hiển thị
        document.addEventListener('DOMContentLoaded', function() {
            loadTasks(1, true);
        });
    </script>
</body>
</html>