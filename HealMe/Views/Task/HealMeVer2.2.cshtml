@{
    Layout = "_Layout";

 }
@model HealMe.ViewModels.TaskUserVM;
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Manager - Qu·∫£n l√Ω c√¥ng vi·ªác</title>
    <link rel="stylesheet" href="~/css/HealMeVer2.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
</head>
<body>
    <header>
        <nav class="container">
            <div>

                <a style="text-decoration:none; color:none" href="/Home">
                    <div class="logo">
                        Daily Catalyst

                    </div>
                </a>

            </div>

            <ul class="nav-links">
                <li><a href="/Task">Nhi·ªám v·ª• c·ªßa b·∫°n</a></li>
                <li><a href="/Home/BuyNow">Mua ngay</a></li>
                <li><a href="/Home/Feedback">C·∫£m nh·∫≠n c·ªßa m·ªçi ng∆∞·ªùi</a></li>
                <li><a href="/Home/Comunity">C·ªông ƒë·ªìng</a></li>
                @{
                    var userId = Context.Session.GetString("UserId");
                    if (!string.IsNullOrEmpty(userId))
                    {
                        <li><a href="/Authentication/Logout">ƒêƒÉng xu·∫•t</a></li>
                    }
                    else
                    {
                        <li><a href="/Authentication/Login">ƒêƒÉng nh·∫≠p</a></li>
                    }
                }
            </ul>
        </nav>
    </header>
    @if(Model != null)
    {
        <div class="container">
            <div class="headerr">
                <h1>B·∫Øt ƒë·∫ßu h√†nh ƒë·ªông ngay n√†o!</h1>
            </div>

            <div class="tabs">
                <button class="tab-btn active" onclick="switchTab('add-task', event)" role="tab" aria-selected="true" aria-controls="add-task">‚ûï Th√™m Vi·ªác</button>
                <button class="tab-btn" onclick="switchTab('all-tasks', event)" role="tab" aria-selected="false" aria-controls="all-tasks">üìã T·∫•t C·∫£</button>
                <button class="tab-btn" onclick="switchTab('completed', event)" role="tab" aria-selected="false" aria-controls="completed">üéâ Nh·∫≠t K√≠ M·ªói Ng√†y</button>
            </div>

            <!-- Tab Th√™m Vi·ªác -->
            <div class="tab-content active" id="add-task">
                <div class="add-task-form">
                    <h2 style="margin-bottom: 20px; color: #333;">Nh·∫≠t k√≠ h√¥m nay</h2>
                    <form id="taskForm" asp-action="CreateTask" method="post" enctype="multipart/form-data" asp-controller="Task">
                        <input type="text" name="userId" hidden value="@Model.UserId">
                        <div class="form-group">
                            <label for="taskTitle">T√™n c√¥ng vi·ªác:</label>
                            <input type="text" id="taskTitle" name="taskTitle" required placeholder="Nh·∫≠p t√™n c√¥ng vi·ªác...">
                        </div>

                        <div class="form-group">
                            <label for="taskNote">Ghi ch√∫:</label>
                            <textarea id="taskNote" name="taskNote" rows="3" placeholder="Th√™m ghi ch√∫ cho c√¥ng vi·ªác..."></textarea>
                        </div>

                        <div class="form-group">
                            <label for="imageInput">H√¨nh ·∫£nh:</label>
                            <div class="image-upload" role="button" tabindex="0" onclick="document.getElementById('imageInput').click()" onkeydown="if(event.key === 'Enter') document.getElementById('imageInput').click()">
                                <input type="file" id="imageInput" name="taskImage" accept="image/*" style="display: none;">
                                <div id="uploadText">
                                    üì∑ Nh·∫•n ƒë·ªÉ ch·ªçn ·∫£nh<br>
                                    <small>H·ªó tr·ª£ JPG, PNG, GIF</small>
                                </div>
                                <img id="previewImage" class="preview-image" style="display: none;" alt="·∫¢nh xem tr∆∞·ªõc">
                            </div>
                        </div>

                        <button type="submit" class="btn">Th√™m C√¥ng Vi·ªác</button>
                    </form>
                </div>
            </div>

            <!-- Tab T·∫•t C·∫£ Vi·ªác -->
            <div class="tab-content" id="all-tasks">
                <h2 style="color: #333; text-align: center; margin-bottom: 20px;">Danh S√°ch ƒê√£ Th√™m</h2>
                
                    <div class="tasks-grid" id="allTasksGrid">
                        <!-- Hardcoded sample tasks -->
                    @if (Model.TaskHaveAdded.Any())
                    {
                        @foreach(var t in Model.TaskHaveAdded)
                        {
                            <div class="@(t.Completed ? "task-card completed" : "task-card")">
                                <h3>@t.Title</h3>
                                <p>@t.Note</p>
                                <img src="@t.ImageUrl" alt="·∫¢nh" class="task-image">
                                <div style="margin-bottom: 15px; font-size: 14px; color: #888;">
                                    üìÖ @t.CreatedAt.ToString("dd/MM/yyyy")
                                </div>
                                <div class="task-actions">
                                     <select 
                                            class="status-select @(t.Completed ? "completed" : "pending")"
                                            onchange="updateTaskStatus(@t.TaskId, this.value, event)"
                                            data-original-value="@(t.Completed.ToString().ToLower())">
                                        <option value="false" selected="@(!t.Completed)">Ch∆∞a ho√†n th√†nh</option>
                                        <option value="true" selected="@(t.Completed)">ƒê√£ ho√†n th√†nh</option>
                                    </select>
                                </div>
                            </div>
                        }
                       
                    }
                    else
                    {
                        <h4 style="margin-top: 20px; text-align: center ">Ch∆∞a c√≥ c√¥ng vi·ªác ƒë∆∞·ª£c th√™m</h4>
                    }
                    
                    </div>
                
              


            </div>
            
                <!-- Tab ƒê√£ Ho√†n Th√†nh -->
            <div class="tab-content" id="completed">
                <div class="completed-gallery">
                    <div class="gallery-header">
                        <h2>H√†nh tr√¨nh b·∫°n ƒë√£ ƒëi qua</h2>
                        <p style="color: #666;">Nh·ªØng kho·∫£nh kh·∫Øc ƒë√°ng nh·ªõ t·ª´ c√°c c√¥ng vi·ªác ƒë√£ ho√†n th√†nh</p>
                    </div>
                    <div class="photo-wall" id="photoWall">
                        @if (Model.TaskHaveCompleted.Any())
                        {
                            @foreach (var t in Model.TaskHaveCompleted)
                            {
                                <div class="photo-item">
                                    <img src="@t.ImageUrl" alt="·∫¢nh th√†nh t·ª±u" class="photo-image">
                                    <div class="photo-caption">@t.Title</div>
                                    <div class="photo-note">@t.Note</div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="empty-state">
                                <h4>Ch∆∞a c√≥ c√¥ng vi·ªác n√†o ƒë∆∞·ª£c ho√†n th√†nh</h4>
                                <p>H√£y b·∫Øt ƒë·∫ßu v√† ho√†n th√†nh m·ªôt c√¥ng vi·ªác ƒë·ªÉ th√™m v√†o b·ªô s∆∞u t·∫≠p!</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            



        </div>
    }
    else
    {
        <h3 style="margin-top: 20px; text-align: center">Kh√¥ng h·ª£p l·ªá</h3>
    }
    

    <script>
        //Tab ·∫£nh ho√†n th√†nh l·ªôn x·ªôn
        window.addEventListener("DOMContentLoaded", () => {
            const photoWall = document.querySelector(".photo-wall");
            const items = document.querySelectorAll(".photo-item");
            if (!items.length) return;

            const wallRect = photoWall.getBoundingClientRect();
            const wallWidth = wallRect.width - -500; // Gi·∫£m th√™m ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng tr√†n
            const wallHeight = wallRect.height - -500;
            const itemWidth = items[0].offsetWidth;
            const itemHeight = items[0].offsetHeight;

            if (items.length > 0) {
                items.forEach(item => {
                    let randomX, randomY, tries = 0, maxTries = 100;
                    let overlap = false;
                    const minDistance = 80;

                    do {
                        randomX = Math.random() * (wallWidth - itemWidth);
                        randomY = Math.random() * (wallHeight - itemHeight);
                        overlap = false;

                        items.forEach(otherItem => {
                            if (otherItem !== item && otherItem.style.left && otherItem.style.top) {
                                const otherX = parseFloat(otherItem.style.left);
                                const otherY = parseFloat(otherItem.style.top);
                                const dx = randomX - otherX;
                                const dy = randomY - otherY;
                                const distance = Math.sqrt(dx * dx + dy * dy);
                                if (distance < minDistance) overlap = true;
                            }
                        });

                        tries++;
                    } while (overlap && tries < maxTries);

                    if (tries >= maxTries) {
                        randomX = Math.random() * (wallWidth - itemWidth);
                        randomY = Math.random() * (wallHeight - itemHeight);
                    }

                    // ƒê·∫£m b·∫£o kh√¥ng tr√†n ra ngo√†i b·∫±ng c√°ch gi·ªõi h·∫°n trong padding
                    randomX = Math.min(Math.max(randomX, 0), wallWidth - itemWidth);
                    randomY = Math.min(Math.max(randomY, 0), wallHeight - itemHeight);

                    const randomRotate = (Math.random() * 30 - 15).toFixed(2);
                    item.style.position = "absolute";
                    item.style.left = `${randomX}px`;
                    item.style.top = `${randomY}px`;
                    item.style.setProperty('--rotation', `${randomRotate}deg`);
                });
            }
        });


        // Keep the original switchTab function
        function switchTab(tabName, event = null) {
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
                btn.setAttribute('aria-selected', 'false');
            });
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            if (event) {
                event.target.classList.add('active');
                event.target.setAttribute('aria-selected', 'true');
            } else {
                document.querySelector(`.tab-btn[onclick="switchTab('${tabName}', event)"]`).classList.add('active');
                document.querySelector(`.tab-btn[onclick="switchTab('${tabName}', event)"]`).setAttribute('aria-selected', 'true');
            }
            document.getElementById(tabName).classList.add('active');
        }



        // Placeholder functions for backend integration
        function completeTask(id) {
            // Replace with backend API call, e.g., fetch('/complete-task', { method: 'POST', body: JSON.stringify({ id }) })
            alert(`G·ª≠i y√™u c·∫ßu ho√†n th√†nh c√¥ng vi·ªác ${id} ƒë·∫øn backend`);
        }

        function deleteTask(id) {
            if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√¥ng vi·ªác n√†y?')) {
                // Replace with backend API call, e.g., fetch('/delete-task', { method: 'POST', body: JSON.stringify({ id }) })
                alert(`G·ª≠i y√™u c·∫ßu x√≥a c√¥ng vi·ªác ${id} ƒë·∫øn backend`);
            }
        }

        function openEditModal(id) {
            // Replace with backend API call to fetch task data, e.g., fetch(`/task/${id}`)
            // Then populate the form with the response data
            document.getElementById('editTaskId').value = id;
            document.getElementById('editTaskTitle').value = 'T√™n m·∫´u'; // Placeholder
            document.getElementById('editTaskNote').value = 'Ghi ch√∫ m·∫´u'; // Placeholder
            document.getElementById('editPreviewImage').style.display = 'none';
            document.getElementById('editUploadText').style.display = 'block';
            document.getElementById('editModal').style.display = 'flex';
        }

        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }

        // Basic image preview for add task
        document.getElementById('imageInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('previewImage').src = e.target.result;
                    document.getElementById('previewImage').style.display = 'block';
                    document.getElementById('uploadText').style.display = 'none';
                };
                reader.readAsDataURL(file);
            }
        });

        // Basic image preview for edit task
        document.getElementById('editImageInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('editPreviewImage').src = e.target.result;
                    document.getElementById('editPreviewImage').style.display = 'block';
                    document.getElementById('editUploadText').style.display = 'none';
                };
                reader.readAsDataURL(file);
            }
        });


        // H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i task
        async function updateTaskStatus(taskId, newStatus) {
            try {
                const isCompleted = (newStatus === "true");
                const response = await fetch('@Url.Action("UpdateTaskStatus", "Task")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({
                        taskId: taskId,
                        status: isCompleted
                    })
                });

                const result = await response.json();

                if (result.success) {
                    // Reload trang ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë li·ªáu
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);

                } else {
                    throw new Error(result.message || 'C·∫≠p nh·∫≠t th·∫•t b·∫°i');
                }

            } catch (error) {

                // Reset l·∫°i select v·ªÅ tr·∫°ng th√°i c≈©
                event.target.value = event.target.getAttribute('data-original-value') || 'false';
            }
        }
        
    </script>
</body>
</html> 