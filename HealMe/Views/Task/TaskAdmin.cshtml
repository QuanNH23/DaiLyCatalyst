@{
    Layout = "_Layout";
}
@model List<HealMe.DTO.AdminTaskDTO>;
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Quản Lý Công Việc</title>
    <link rel="stylesheet" href="~/css/HealMeVer2 - AdminTask.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
</head>
<body>
    <header>
        <nav class="">
            <div>

                <a style="text-decoration:none; color:none" href="/Home">
                    <div class="logo">
                        Daily Catalyst

                    </div>
                </a>

            </div>

            <ul class="nav-links">
                <li><a href="/Task">Nhiệm vụ của bạn</a></li>
                <li><a href="/Home/BuyNow">Mua ngay</a></li>
                <li><a href="/Home/Feedback">Cảm nhận của mọi người</a></li>
                @{
                    var userId = Context.Session.GetString("UserId");
                    if (!string.IsNullOrEmpty(userId))
                    {
                        <li><a href="/Authentication/Logout">Đăng xuất</a></li>
                    }
                    else
                    {
                        <li><a href="/Authentication/Login">Đăng nhập</a></li>
                    }
                }
            </ul>
        </nav>
    </header>
    @if(Model != null)
    {
        <div class="container">
            <div class="headerr">
                <h1>🛠️ Admin Dashboard</h1>
                <p>Quản lý công việc và theo dõi hiệu suất nhân viên</p>
            </div>

            <div class="stats-container">
                <div class="stat-card total-users">
                    <div class="stat-number" id="totalUsers">8</div>
                    <div class="stat-label">Tổng Tài Khoản</div>
                </div>
                <div class="stat-card total-completed">
                    <div class="stat-number" id="totalCompleted">156</div>
                    <div class="stat-label">Công Việc Hoàn Thành</div>
                </div>
                <div class="stat-card total-pending">
                    <div class="stat-number" id="totalPending">43</div>
                    <div class="stat-label">Công Việc Chưa Xong</div>
                </div>
                <div class="stat-card avg-completion">
                    <div class="stat-number" id="avgCompletion">78%</div>
                    <div class="stat-label">Tỷ Lệ Hoàn Thành</div>
                </div>
            </div>

            <div class="table-container">
                <div class="search-bar">
                    <input type="text" class="search-input" placeholder="🔍 Tìm kiếm theo tên đăng nhập..." id="searchInput">
                </div>

                <table class="table" id="userTable">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Tên Đăng Nhập</th>
                            <th>Đã Hoàn Thành</th>
                            <th>Chưa Hoàn Thành</th>
                            <th>Tiến Độ</th>
                            <th>Thao Tác</th>
                        </tr>
                    </thead>
                    <tbody id="tableBody">
                        <!-- Dữ liệu sẽ được load bằng JavaScript -->
                        
                    </tbody>
                </table>
            </div>


        </div>
        <!-- Modal Chi Tiết Task -->
        <div id="taskModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <div>
                        <h2>📋 Chi Tiết Công Việc</h2>
                        <div class="user-info" id="modalUserInfo"></div>
                    </div>
                    <button class="close" onclick="closeModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <div id="taskContainer" class="task-grid">
                        <!-- Tasks sẽ được load ở đây -->
                    </div>
                </div>
            </div>
        </div>

        <script>
            // Dữ liệu mẫu
            const userData = @Html.Raw(Json.Serialize(Model));

            function calculateStats() {
                const totalUsers = userData.length;
                const totalCompleted = userData.reduce((sum, user) => sum + user.completedTasksCount, 0);
                const totalPending = userData.reduce((sum, user) => sum + user.uncompletedTasksCount, 0);
                const avgCompletion = Math.round((totalCompleted / (totalCompleted + totalPending)) * 100);

                document.getElementById('totalUsers').textContent = totalUsers;
                document.getElementById('totalCompleted').textContent = totalCompleted;
                document.getElementById('totalPending').textContent = totalPending;
                document.getElementById('avgCompletion').textContent = avgCompletion + '%';
            }

            function createProgressBar(completed, pending) {
                const total = completed + pending;
                const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;
                return `
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${percentage}%"></div>
                        </div>
                        <small style="color: #666; margin-left: 8px;">${percentage}%</small>
                    `;
            }

            function renderTable(data = userData) {
                const tableBody = document.getElementById('tableBody');
                tableBody.innerHTML = '';

                data.forEach(user => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                            <td class="user-id">#${user.userId.toString().padStart(3, '0')}</td>
                            <td class="username">${user.username}</td>
                            <td style="color: #28a745; font-weight: 600;">${user.completedTasksCount}</td>
                            <td style="color: #dc3545; font-weight: 600;">${user.uncompletedTasksCount}</td>
                            <td>${createProgressBar(user.completedTasksCount, user.uncompletedTasksCount)}</td>
                            <td>
                                <div class="action-buttons">
                                    <button class="btn btn-view" onclick="viewUserTasks(${user.userId})">Xem chi tiết</button>
                                </div>
                            </td>
                        `;
                    tableBody.appendChild(row);
                });
            }

            function filterTable() {
                const searchTerm = document.getElementById('searchInput').value.toLowerCase();
                const statusFilter = document.getElementById('statusFilter').value;

                const filteredData = userData.filter(user => {
                    const matchesSearch = user.username.toLowerCase().includes(searchTerm);
                    const matchesStatus = !statusFilter || user.status === statusFilter;
                    return matchesSearch && matchesStatus;
                });

                renderTable(filteredData);
            }

            // Event listeners
            document.getElementById('searchInput').addEventListener('input', filterTable);

            // Khởi tạo trang
            calculateStats();
            renderTable();

            let currentUserId = null;

            async function viewUserTasks(userId) {
                currentUserId = userId;
                const modal = document.getElementById('taskModal');
                const taskContainer = document.getElementById('taskContainer');
                const modalUserInfo = document.getElementById('modalUserInfo');

                // Hiển thị modal với loading
                modal.style.display = 'block';
                taskContainer.innerHTML = `
                        <div class="loading">
                            <div class="spinner"></div>
                            <p>Đang tải dữ liệu...</p>
                        </div>
                    `;
                modalUserInfo.innerHTML = 'Đang tải...';

                try {
                    const response = await fetch(`@Url.Action("GetUserTasks", "Task")?userId=${userId}`);
                    if (!response.ok) throw new Error('Không thể tải dữ liệu');

                    const data = await response.json();

                    // Cập nhật thông tin header
                    modalUserInfo.innerHTML = `
                            User ID: #${userId.toString().padStart(3, '0')} |
                            Tên đăng nhập: <strong>${data.username}</strong> |
                            Tổng task: ${data.tasks.length}
                        `;

                    // Render tasks
                    if (data.tasks.length === 0) {
                        taskContainer.innerHTML = `
                                <div class="no-tasks">
                                    <div style="font-size: 48px; margin-bottom: 15px;">📝</div>
                                    <h3>Chưa có công việc nào</h3>
                                    <p>Người dùng này chưa được giao công việc.</p>
                                </div>
                            `;
                    } else {
                        taskContainer.innerHTML = data.tasks.map(task => `
                                <div class="task-card ${task.completed ? 'completed' : 'pending'}">
                                    <div class="task-id">#${task.taskId}</div>
                                    <div class="task-header">
                                        <img src="${task.imageUrl || 'https://via.placeholder.com/80x80/667eea/ffffff?text=TASK'}"
                                             alt="Task Image" class="task-image"
                                             onerror="this.src='https://via.placeholder.com/80x80/667eea/ffffff?text=TASK'">
                                        <div class="task-info">
                                            <div class="task-title">${task.title}</div>
                                            <div class="task-note">${task.note}</div>
                                            <div class="task-status">
                                                <label style="font-weight: 600; color: #333;">Trạng thái:</label>
                                                <select class="status-select ${task.completed ? 'completed' : 'pending'}"
                                                        onchange="updateTaskStatus(${task.taskId}, this.value, event)">
                                                    <option value="false" ${task.completed === false ? 'selected' : ''}>Chưa hoàn thành</option>
                                                    <option value="true" ${task.completed === true ? 'selected' : ''}>Đã hoàn thành</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `).join('');
                    }

                } catch (error) {
                    taskContainer.innerHTML = `
                            <div class="no-tasks">
                                <div style="font-size: 48px; margin-bottom: 15px;">❌</div>
                                <h3>Có lỗi xảy ra</h3>
                                <p>${error.message}</p>
                            </div>
                        `;
                    showNotification('Không thể tải dữ liệu: ' + error.message, true);
                }
            }
            function closeModal() {
                document.getElementById('taskModal').style.display = 'none';
            }


            // Hàm hiển thị notification
            function showNotification(message, isError = false) {
                const notification = document.createElement('div');
                notification.className = `notification ${isError ? 'error' : ''}`;
                notification.textContent = message;
                document.body.appendChild(notification);

                setTimeout(() => {
                    notification.remove();
                }, 3000);
            }
            // Hàm cập nhật trạng thái task
            async function updateTaskStatus(taskId, newStatus) {
                try {
                    const isCompleted = (newStatus === "true");
                    const response = await fetch('@Url.Action("UpdateTaskStatus", "Task")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: JSON.stringify({
                            taskId: taskId,
                            status: isCompleted
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Cập nhật giao diện
                        const taskCard = event.target.closest('.task-card');
                        if (taskCard) {
                            taskCard.className = `task-card ${isCompleted ? 'complete' : 'pending'}`;
                        }
                        event.target.className = `status-select ${isCompleted ? 'complete' : 'pending'}`;

                        // Hiển thị thông báo thành công
                        showNotification(`Đã cập nhật trạng thái task #${taskId} thành "${isCompleted ? 'Hoàn thành' : 'Chưa hoàn thành'}"`);

                        // Reload trang để cập nhật số liệu
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);

                    } else {
                        throw new Error(result.message || 'Cập nhật thất bại');
                    }

                } catch (error) {
                    showNotification('Lỗi: ' + error.message, true);
                    // Reset lại select về trạng thái cũ
                    event.target.value = event.target.getAttribute('data-original-value') || 'false';
                }
            }

        </script>


    }
    
    
</body>
</html>